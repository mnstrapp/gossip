// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: gossip.proto

package gossip

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GossipApiClient is the client API for GossipApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GossipApiClient interface {
	SubscribeToEvents(ctx context.Context, in *User, opts ...grpc.CallOption) (GossipApi_SubscribeToEventsClient, error)
	SendEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Empty, error)
	StreamEvents(ctx context.Context, opts ...grpc.CallOption) (GossipApi_StreamEventsClient, error)
	UnsubscribeFromEvents(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error)
}

type gossipApiClient struct {
	cc grpc.ClientConnInterface
}

func NewGossipApiClient(cc grpc.ClientConnInterface) GossipApiClient {
	return &gossipApiClient{cc}
}

func (c *gossipApiClient) SubscribeToEvents(ctx context.Context, in *User, opts ...grpc.CallOption) (GossipApi_SubscribeToEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &GossipApi_ServiceDesc.Streams[0], "/gossip.GossipApi/SubscribeToEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &gossipApiSubscribeToEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GossipApi_SubscribeToEventsClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type gossipApiSubscribeToEventsClient struct {
	grpc.ClientStream
}

func (x *gossipApiSubscribeToEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gossipApiClient) SendEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/gossip.GossipApi/SendEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gossipApiClient) StreamEvents(ctx context.Context, opts ...grpc.CallOption) (GossipApi_StreamEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &GossipApi_ServiceDesc.Streams[1], "/gossip.GossipApi/StreamEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &gossipApiStreamEventsClient{stream}
	return x, nil
}

type GossipApi_StreamEventsClient interface {
	Send(*Event) error
	Recv() (*Event, error)
	grpc.ClientStream
}

type gossipApiStreamEventsClient struct {
	grpc.ClientStream
}

func (x *gossipApiStreamEventsClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gossipApiStreamEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gossipApiClient) UnsubscribeFromEvents(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/gossip.GossipApi/UnsubscribeFromEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GossipApiServer is the server API for GossipApi service.
// All implementations must embed UnimplementedGossipApiServer
// for forward compatibility
type GossipApiServer interface {
	SubscribeToEvents(*User, GossipApi_SubscribeToEventsServer) error
	SendEvent(context.Context, *Event) (*Empty, error)
	StreamEvents(GossipApi_StreamEventsServer) error
	UnsubscribeFromEvents(context.Context, *User) (*Empty, error)
	mustEmbedUnimplementedGossipApiServer()
}

// UnimplementedGossipApiServer must be embedded to have forward compatible implementations.
type UnimplementedGossipApiServer struct {
}

func (UnimplementedGossipApiServer) SubscribeToEvents(*User, GossipApi_SubscribeToEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToEvents not implemented")
}
func (UnimplementedGossipApiServer) SendEvent(context.Context, *Event) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEvent not implemented")
}
func (UnimplementedGossipApiServer) StreamEvents(GossipApi_StreamEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedGossipApiServer) UnsubscribeFromEvents(context.Context, *User) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeFromEvents not implemented")
}
func (UnimplementedGossipApiServer) mustEmbedUnimplementedGossipApiServer() {}

// UnsafeGossipApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GossipApiServer will
// result in compilation errors.
type UnsafeGossipApiServer interface {
	mustEmbedUnimplementedGossipApiServer()
}

func RegisterGossipApiServer(s grpc.ServiceRegistrar, srv GossipApiServer) {
	s.RegisterService(&GossipApi_ServiceDesc, srv)
}

func _GossipApi_SubscribeToEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(User)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GossipApiServer).SubscribeToEvents(m, &gossipApiSubscribeToEventsServer{stream})
}

type GossipApi_SubscribeToEventsServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type gossipApiSubscribeToEventsServer struct {
	grpc.ServerStream
}

func (x *gossipApiSubscribeToEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _GossipApi_SendEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GossipApiServer).SendEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gossip.GossipApi/SendEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GossipApiServer).SendEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _GossipApi_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GossipApiServer).StreamEvents(&gossipApiStreamEventsServer{stream})
}

type GossipApi_StreamEventsServer interface {
	Send(*Event) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type gossipApiStreamEventsServer struct {
	grpc.ServerStream
}

func (x *gossipApiStreamEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gossipApiStreamEventsServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GossipApi_UnsubscribeFromEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GossipApiServer).UnsubscribeFromEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gossip.GossipApi/UnsubscribeFromEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GossipApiServer).UnsubscribeFromEvents(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// GossipApi_ServiceDesc is the grpc.ServiceDesc for GossipApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GossipApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gossip.GossipApi",
	HandlerType: (*GossipApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEvent",
			Handler:    _GossipApi_SendEvent_Handler,
		},
		{
			MethodName: "UnsubscribeFromEvents",
			Handler:    _GossipApi_UnsubscribeFromEvents_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToEvents",
			Handler:       _GossipApi_SubscribeToEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamEvents",
			Handler:       _GossipApi_StreamEvents_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gossip.proto",
}
